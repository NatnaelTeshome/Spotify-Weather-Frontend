{"ast":null,"code":"var _jsxFileName = \"/Users/johnboesen/Documents/Code/bootcamp-week1-exercises-1/personal-assistant/src/Containers/Reminders/index.js\";\nimport { SearchBar, AddButton, Reminder, ReminderBox } from \"./styles.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst Reminders = () => {\n  const initialTodos = [\"Click the plus button below to add a reminder!\", \"Click this reminder to mark it as complete!\", \"mo reminders mo power\"];\n  const [reminders, setReminders] = useState(initialTodos);\n  const [query, setQuery] = useState('');\n  let remindersBackup;\n  useEffect(() => {\n    remindersBackup = [...reminders];\n  }, []);\n\n  const handleComplete = todo => {\n    reminders.forEach(e => console.log(e));\n    console.log(reminders.indexOf(todo));\n    reminders.splice(reminders.indexOf(todo), 1);\n    reminders.forEach(e => console.log(e));\n    const dummyArray = [...reminders];\n    remindersBackup = dummyArray; // Why is this not updating??\n\n    setReminders(() => {\n      return dummyArray;\n    });\n  };\n\n  const handleSearch = query => {\n    // add empty \n    console.log(\"reminders contains...\");\n    remindersBackup.forEach(e => {\n      console.log(e);\n    });\n    query ? console.log(query) : console.log(\"no query\");\n\n    if (!query) {\n      const dummyArray = [...reminders];\n      setReminders(dummyArray);\n      return;\n    }\n\n    let res = [];\n    reminders.forEach(e => {\n      if (e.toLowerCase().includes(query.toLowerCase())) {\n        res.push(e);\n      }\n    });\n    res.forEach(e => {\n      console.log(e);\n    });\n    setReminders(res);\n  };\n\n  const handleAdd = () => {\n    // Why won't this go away???\n    const newReminder = prompt('Add your reminder');\n\n    if (!newReminder) {\n      handleAdd();\n    }\n\n    reminders.push(newReminder);\n    const dummyArray = [];\n    reminders.forEach(e => {\n      if (e) {\n        dummyArray.push(e);\n      }\n\n      return;\n    });\n    remindersBackup = dummyArray;\n    setReminders(dummyArray);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SearchBar, {\n    query: query,\n    setQuery: setQuery,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: query,\n    onChange: e => {\n      setQuery(e.target.value);\n      handleSearch(e.target.value);\n    },\n    placeholder: \"Search for a reminder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ReminderBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, reminders.map(todo => /*#__PURE__*/React.createElement(Reminder, {\n    key: todo,\n    onClick: () => handleComplete(todo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }, \" \", todo)), /*#__PURE__*/React.createElement(AddButton, {\n    onClick: () => handleAdd(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, \"Add Reminder\"))));\n};\n\nexport default Reminders;","map":{"version":3,"sources":["/Users/johnboesen/Documents/Code/bootcamp-week1-exercises-1/personal-assistant/src/Containers/Reminders/index.js"],"names":["SearchBar","AddButton","Reminder","ReminderBox","React","useState","useEffect","Reminders","initialTodos","reminders","setReminders","query","setQuery","remindersBackup","handleComplete","todo","forEach","e","console","log","indexOf","splice","dummyArray","handleSearch","res","toLowerCase","includes","push","handleAdd","newReminder","prompt","target","value","display","justifyContent","alignItems","map"],"mappings":"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","sourcesContent":["import { SearchBar, AddButton, Reminder, ReminderBox } from \"./styles.js\"\nimport React, { useState, useEffect } from 'react'\n\nconst Reminders = () => {\n    const initialTodos = [\"Click the plus button below to add a reminder!\", \"Click this reminder to mark it as complete!\", \"mo reminders mo power\"]\n    const [reminders, setReminders] = useState(initialTodos)\n    const [query, setQuery] = useState('')\n    let remindersBackup\n    useEffect(() => {\n        remindersBackup = [...reminders]\n    }, []);\n    const handleComplete = (todo) => {\n        reminders.forEach((e) => console.log(e))\n        console.log(reminders.indexOf(todo))\n        reminders.splice(reminders.indexOf(todo), 1)\n        reminders.forEach((e) => console.log(e))\n        const dummyArray = [...reminders]\n        remindersBackup = dummyArray\n        // Why is this not updating??\n        setReminders(() => { return dummyArray })\n    };\n\n    const handleSearch = (query) => {\n        // add empty \n        console.log(\"reminders contains...\")\n\n        remindersBackup.forEach(e => { console.log(e) })\n        query ? console.log(query) : console.log(\"no query\")\n        if (!query) {\n            const dummyArray = [...reminders]\n            setReminders(dummyArray)\n            return\n        }\n        let res = []\n        reminders.forEach(e => {\n            if (e.toLowerCase().includes(query.toLowerCase())) {\n                res.push(e)\n            }\n        })\n        res.forEach(e => {\n            console.log(e)\n        })\n        setReminders(res)\n    }\n\n    const handleAdd = () => {\n        // Why won't this go away???\n        const newReminder = prompt('Add your reminder')\n        if (!newReminder) {\n            handleAdd()\n        }\n        reminders.push(newReminder)\n        const dummyArray = []\n        reminders.forEach((e) => { if (e) { dummyArray.push(e) } return; })\n        remindersBackup = dummyArray\n        setReminders(dummyArray)\n    }\n\n    return (\n        <div>\n            <SearchBar query={query} setQuery={setQuery}>\n                <input type=\"text\" value={query} onChange={e => { setQuery(e.target.value); handleSearch(e.target.value) }} placeholder=\"Search for a reminder\" />\n            </SearchBar>\n            {/* I want this div half width and centered??? */}\n            <div style={{\n                display: 'flex', justifyContent: 'center', alignItems: 'center'\n            }}>\n                <ReminderBox>\n                    {/* How do I get this to work??? */}\n                    {reminders.map((todo) => (\n                        <Reminder key={todo}\n                            onClick={() => handleComplete(todo)}\n                        > {todo}\n                        </Reminder>\n                    ))}\n                    <AddButton onClick={() => handleAdd()}>Add Reminder</AddButton>\n                </ReminderBox>\n            </div>\n        </div>\n    );\n}\nexport default Reminders\n"]},"metadata":{},"sourceType":"module"}